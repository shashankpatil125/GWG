import { composeRefs } from '../../react-compose-refs/dist/index.module.js';
import * as React from 'react';
import _extends from '../../../@babel/runtime/helpers/esm/extends.js';

const Slot=/*#__PURE__*/React.forwardRef(((e,o)=>{const{children:l,...c}=e;return 1===React.Children.count(l)?/*#__PURE__*/React.createElement(r,_extends({},c,{ref:o}),l):/*#__PURE__*/React.createElement(React.Fragment,null,React.Children.map(l,(e=>/*#__PURE__*/React.isValidElement(e)&&e.type===Slottable?/*#__PURE__*/React.createElement(r,_extends({},c,{ref:o}),e.props.children):e)))}));Slot.displayName="Slot";const r=/*#__PURE__*/React.forwardRef(((n,r)=>{const{children:l,...c}=n,i=React.Children.only(l);return React.isValidElement(i)?/*#__PURE__*/React.cloneElement(i,{...o(c,i.props),ref:composeRefs(r,i.ref)}):null}));r.displayName="SlotClone";const Slottable=({children:e})=>e;function o(e,t){const n={...t};for(const r in t){const o=e[r],c=t[r];/^on[A-Z]/.test(r)?n[r]=l(c,o):"style"===r?n[r]={...o,...c}:"className"===r&&(n[r]=[o,c].filter(Boolean).join(" "));}return {...e,...n}}function l(e,t){return function(...n){null==e||e(...n);n[0]instanceof Event&&n[0].defaultPrevented||null==t||t(...n);}}

export { Slot, Slottable };
